// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Post {
    id        String   @id @default(cuid()) @map("_id")
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String   @id @default(cuid()) @map("_id")
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String    @id @default(cuid()) @map("_id")
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid()) @map("_id")
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    models       Model[]
}

model VerificationToken {
    id         String    @id @default(cuid()) @map("_id")
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
model Model {
    id          String   @id @default(cuid()) @map("_id")
    firstName   String
    lastName    String
    nickname    String?
    description String?
    sold        Boolean  @default(false)
    userId      String? 
    user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    photoUrls   String[]
    videoUrls   String[]
    tags        ModelTag[] // Relation to ModelTag
}

model Tag {
    id    String  @id @default(cuid()) @map("_id")
    name  String  @unique
    models ModelTag[] // Relation to ModelTag
}

model ModelTag {
    id      String @id @default(cuid()) @map("_id")
    modelId String
    tagId   String
    model   Model @relation(fields: [modelId], references: [id], onDelete: Cascade)
    tag     Tag   @relation(fields: [tagId], references: [id], onDelete: Cascade)

    @@unique([modelId, tagId])
}

